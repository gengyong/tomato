<?php
/**
 * Matomo - free/libre analytics platform
 *
 * @link https://matomo.org
 * @license http://www.gnu.org/licenses/gpl-3.0.html GPL v3 or later
 *
 */

namespace Piwik\Plugins\CoreConsole\Commands;
use Piwik\Container\StaticContainer;
use Piwik\Plugin\ConsoleCommand;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

/**
 */
class RefreshManifest extends ConsoleCommand
{

    public function isEnabled()
    {
        return true;
        return Development::isEnabled();
    }

    protected function configure()
    {
        $this->setName('manifest:refresh');
        $this->setDescription('Refresh config/manifest.inc.php file.');
    }

    protected function execute(InputInterface $input, OutputInterface $output)
    {
        $manifest = PIWIK_INCLUDE_PATH . '/config/manifest.inc.php';

        if (file_exists($manifest)) {
            require_once $manifest; 
        }

        if (!class_exists('Piwik\\Manifest')) {
            error_log('config/manifest.inc.php was missing.');
            return;
        }

        $fileMismatch = array();

        $files = \Piwik\Manifest::$files;
        $hasMd5file = function_exists('md5_file');
        $hasMd5 = function_exists('md5');
        foreach ($files as $path => $props) {
            $file = PIWIK_INCLUDE_PATH . '/' . $path;

            if (file_exists($file) && is_readable($file)) {
                $fileSize = filesize($file);
                if ($fileSize != $props[0]) {
                    // size mismatch
                    $md5sum = $props[1];
                    if (in_array(substr($path, -4), array('.gif', '.ico', '.jpg', '.png', '.swf'))) {
                        if ($hasMd5file) {
                            $md5sum = @md5_file($file);
                        }
                    } else {
                        if ($hasMd5) {
                            // convert end-of-line characters and re-test text files
                            $content = @file_get_contents($file);
                            $content = str_replace("\r\n", "\n", $content);
                            $fileSize = strlen($content);
                            $md5sum = @md5($content);
                        }
                    }
                    $output->writeln("[" . $path . "]:");
                    $output->writeln("size: " . $props[0] . " => " . $fileSize);
                    $output->writeln("md5: " . $props[1] . " => " . $md5sum);
                    $fileMismatch[$path] = array("oldsize"=> $props[0], "oldmd5" => $props[1], "size" => $fileSize, "md5" => $md5sum);

                } else {
                    if ($hasMd5file) {
                        $md5sum = @md5_file($file);
                        if ($md5sum !== $props[1]) {
                            // md5sum mismatch
                            $output->writeln("[" . $path . "]:");
                            $output->writeln("size: " . $props[0] . " => " . $fileSize);
                            $output->writeln("md5: " . $props[1] . " => " . $md5sum);
                            $fileMismatch[$path] = array("oldsize"=> $props[0], "oldmd5" => $props[1], "size" => $fileSize, "md5" => $md5sum);
                        }
                    }
                }
            }
        }

        foreach ($fileMismatch as $path => $props) {
            $files[$path][0] =  $props["size"];
            $files[$path][1] =  $props["md5"];
        }

        $prefix = implode("\n", array(
            "<?php",
            "// This file is automatically generated during the Matomo build process ",
            "namespace Piwik;",
            "class Manifest {",
            "\tstatic \$files=array(",
            ""
        ));

        $fileList = implode("\n", array_map(function($key, $item) {
            return "\t\t\"" . $key . '"' . ' => array("' . $item[0] . '", "' . $item[1] . '"),';
        }, array_keys($files), $files));

        $postfix = "\n\t);\n}\n";

        $content = $prefix . $fileList . $postfix;

        $manifestFile = fopen($manifest, "w") or die("Unable to open " . $manifest);
        fwrite($manifestFile, $content);
        fclose($manifestFile);

        $output->writeln("Success refresh manifest file(" . count($fileMismatch) ." items changed).");
    }

}
